function __git_branch_list
  git branch | sed -e "s/[^a-zZ-Z_-]*//g"
end
 
#
# Completions for the git command
# This file was autogenerated by the file make_vcs_completions.fish
# which is shipped with the fish source code.
#
 
#
# Completions from commandline
#
 
 
#
# subcommands
#
 
complete -c git -n '__fish_use_subcommand' -x -a add -d "Add file contents to the index"
complete -c git -n '__fish_use_subcommand' -x -a am -d "Apply a series of patches from a mailbox"
complete -c git -n '__fish_use_subcommand' -x -a annotate -d "Annotate file lines with commit info"
complete -c git -n '__fish_use_subcommand' -x -a apply -d "Apply a patch on a git index file and a working tree"
complete -c git -n '__fish_use_subcommand' -x -a archive -d "Create an archive of files from a named tree"
complete -c git -n '__fish_use_subcommand' -x -a bisect -d "Find the change that introduced a bug by binary search"
complete -c git -n '__fish_use_subcommand' -x -a blame -d "Show what revision and author last modified each line of a file"
complete -c git -n '__fish_use_subcommand' -x -a branch -d "List, create, or delete branches"
complete -c git -n '__fish_use_subcommand' -x -a bundle -d "Move objects and refs by archive"
complete -c git -n '__fish_use_subcommand' -x -a cat-file -d "Provide content or type/size information for repository objects"
complete -c git -n '__fish_use_subcommand' -x -a check-attr -d "Display gitattributes information."
complete -c git -n '__fish_use_subcommand' -x -a check-ref-format -d "Make sure ref name is well formed"
complete -c git -n '__fish_use_subcommand' -x -a checkout-index -d "Copy files from the index to the working tree"
complete -c git -n '__fish_use_subcommand' -x -a checkout -d "Checkout a branch or paths to the working tree"
complete -c git -n '__fish_use_subcommand' -x -a cherry-pick -d "Apply the change introduced by an existing commit"
complete -c git -n '__fish_use_subcommand' -x -a cherry -d "Find commits not merged upstream"
complete -c git -n '__fish_use_subcommand' -x -a clean -d "Remove untracked files from the working tree"
complete -c git -n '__fish_use_subcommand' -x -a clone -d "Clone a repository into a new directory"
complete -c git -n '__fish_use_subcommand' -x -a commit-tree -d "Create a new commit object"
complete -c git -n '__fish_use_subcommand' -x -a commit -d "Record changes to the repository"
complete -c git -n '__fish_use_subcommand' -x -a config -d "Get and set repository or global options"
complete -c git -n '__fish_use_subcommand' -x -a count-objects -d "Count unpacked number of objects and their disk consumption"
complete -c git -n '__fish_use_subcommand' -x -a daemon -d "A really simple server for git repositories"
complete -c git -n '__fish_use_subcommand' -x -a describe -d "Show the most recent tag that is reachable from a commit"
complete -c git -n '__fish_use_subcommand' -x -a diff-files -d "Compares files in the working tree and the index"
complete -c git -n '__fish_use_subcommand' -x -a diff-index -d "Compares content and mode of blobs between the index and repository"
complete -c git -n '__fish_use_subcommand' -x -a diff-tree -d "Compares the content and mode of blobs found via two tree objects"
complete -c git -n '__fish_use_subcommand' -x -a diff -d "Show changes between commits, commit and working tree, etc"
complete -c git -n '__fish_use_subcommand' -x -a fast-export -d "Git data exporter"
complete -c git -n '__fish_use_subcommand' -x -a fast-import -d "Backend for fast Git data importers"
complete -c git -n '__fish_use_subcommand' -x -a fetch-pack -d "Receive missing objects from another repository"
complete -c git -n '__fish_use_subcommand' -x -a fetch -d "Download objects and refs from another repository"
complete -c git -n '__fish_use_subcommand' -x -a filter-branch -d "Rewrite branches"
complete -c git -n '__fish_use_subcommand' -x -a fmt-merge-msg -d "Produce a merge commit message"
complete -c git -n '__fish_use_subcommand' -x -a for-each-ref -d "Output information on each ref"
complete -c git -n '__fish_use_subcommand' -x -a format-patch -d "Prepare patches for e-mail submission"
complete -c git -n '__fish_use_subcommand' -x -a fsck-objects -d "Verifies the connectivity and validity of the objects in the database"
complete -c git -n '__fish_use_subcommand' -x -a fsck -d "Verifies the connectivity and validity of the objects in the database"
complete -c git -n '__fish_use_subcommand' -x -a gc -d "Cleanup unnecessary files and optimize the local repository"
complete -c git -n '__fish_use_subcommand' -x -a get-tar-commit-id -d "Extract commit ID from an archive created using git-archive"
complete -c git -n '__fish_use_subcommand' -x -a grep -d "Print lines matching a pattern"
complete -c git -n '__fish_use_subcommand' -x -a hash-object -d "Compute object ID and optionally creates a blob from a file"
complete -c git -n '__fish_use_subcommand' -x -a help -d "display help information about git"
complete -c git -n '__fish_use_subcommand' -x -a http-fetch -d "Download from a remote git repository via HTTP"
complete -c git -n '__fish_use_subcommand' -x -a http-push -d "Push objects over HTTP/DAV to another repository"
complete -c git -n '__fish_use_subcommand' -x -a imap-send -d "Dump a mailbox from stdin into an imap folder"
complete -c git -n '__fish_use_subcommand' -x -a index-pack -d "Build pack index file for an existing packed archive"
complete -c git -n '__fish_use_subcommand' -x -a init-db -d "Creates an empty git repository"
complete -c git -n '__fish_use_subcommand' -x -a init -d "Create an empty git repository or reinitialize an existing one"
complete -c git -n '__fish_use_subcommand' -x -a instaweb -d "Instantly browse your working repository in gitweb"
complete -c git -n '__fish_use_subcommand' -x -a log -d "Show commit logs"
complete -c git -n '__fish_use_subcommand' -x -a lost-found -d "Recover lost refs that luckily have not yet been pruned"
complete -c git -n '__fish_use_subcommand' -x -a ls-files -d "Show information about files in the index and the working tree"
complete -c git -n '__fish_use_subcommand' -x -a ls-remote -d "List references in a remote repository"
complete -c git -n '__fish_use_subcommand' -x -a ls-tree -d "List the contents of a tree object"
complete -c git -n '__fish_use_subcommand' -x -a mailinfo -d "Extracts patch and authorship from a single e-mail message"
complete -c git -n '__fish_use_subcommand' -x -a mailsplit -d "Simple UNIX mbox splitter program"
complete -c git -n '__fish_use_subcommand' -x -a merge-base -d "Find as good common ancestors as possible for a merge"
complete -c git -n '__fish_use_subcommand' -x -a merge-file -d "Run a three-way file merge"
complete -c git -n '__fish_use_subcommand' -x -a merge-index -d "Run a merge for files needing merging"
complete -c git -n '__fish_use_subcommand' -x -a merge-one-file -d "The standard helper program to use with git-merge-index"
complete -c git -n '__fish_use_subcommand' -x -a merge-tree -d "Show three-way merge without touching index"
complete -c git -n '__fish_use_subcommand' -x -a merge -d "Join two or more development histories together"
complete -c git -n '__fish_use_subcommand' -x -a mergetool -d "Run merge conflict resolution tools to resolve merge conflicts"
complete -c git -n '__fish_use_subcommand' -x -a mktag -d "Creates a tag object"
complete -c git -n '__fish_use_subcommand' -x -a mktree -d "Build a tree-object from ls-tree formatted text"
complete -c git -n '__fish_use_subcommand' -x -a mv -d "Move or rename a file, a directory, or a symlink"
complete -c git -n '__fish_use_subcommand' -x -a name-rev -d "Find symbolic names for given revs"
complete -c git -n '__fish_use_subcommand' -x -a pack-objects -d "Create a packed archive of objects"
complete -c git -n '__fish_use_subcommand' -x -a pack-redundant -d "Find redundant pack files"
complete -c git -n '__fish_use_subcommand' -x -a pack-refs -d "Pack heads and tags for efficient repository access"
complete -c git -n '__fish_use_subcommand' -x -a parse-remote -d "Routines to help parsing remote repository access parameters"
complete -c git -n '__fish_use_subcommand' -x -a patch-id -d "Compute unique ID for a patch"
complete -c git -n '__fish_use_subcommand' -x -a peek-remote -d "List the references in a remote repository"
complete -c git -n '__fish_use_subcommand' -x -a prune-packed -d "Remove extra objects that are already in pack files"
complete -c git -n '__fish_use_subcommand' -x -a prune -d "Prune all unreachable objects from the object database"
complete -c git -n '__fish_use_subcommand' -x -a pull -d "Fetch from and merge with another repository or a local branch"
complete -c git -n '__fish_use_subcommand' -x -a push -d "Update remote refs along with associated objects"
complete -c git -n '__fish_use_subcommand' -x -a quiltimport -d "Applies a quilt patchset onto the current branch"
complete -c git -n '__fish_use_subcommand' -x -a read-tree -d "Reads tree information into the index"
complete -c git -n '__fish_use_subcommand' -x -a rebase -d "Forward-port local commits to the updated upstream head"
complete -c git -n '__fish_use_subcommand' -x -a receive-pack -d "Receive what is pushed into the repository"
complete -c git -n '__fish_use_subcommand' -x -a reflog -d "Manage reflog information"
complete -c git -n '__fish_use_subcommand' -x -a relink -d "Hardlink common objects in local repositories"
complete -c git -n '__fish_use_subcommand' -x -a remote -d "manage set of tracked repositories"
complete -c git -n '__fish_use_subcommand' -x -a repack -d "Pack unpacked objects in a repository"
complete -c git -n '__fish_use_subcommand' -x -a repo-config -d "Get and set repository or global options"
complete -c git -n '__fish_use_subcommand' -x -a request-pull -d "Generates a summary of pending changes"
complete -c git -n '__fish_use_subcommand' -x -a rerere -d "Reuse recorded resolution of conflicted merges"
complete -c git -n '__fish_use_subcommand' -x -a reset -d "Reset current HEAD to the specified state"
complete -c git -n '__fish_use_subcommand' -x -a rev-list -d "Lists commit objects in reverse chronological order"
complete -c git -n '__fish_use_subcommand' -x -a rev-parse -d "Pick out and massage parameters"
complete -c git -n '__fish_use_subcommand' -x -a revert -d "Revert an existing commit"
complete -c git -n '__fish_use_subcommand' -x -a rm -d "Remove files from the working tree and from the index"
complete -c git -n '__fish_use_subcommand' -x -a send-pack -d "Push objects over git protocol to another repository"
complete -c git -n '__fish_use_subcommand' -x -a sh-setup -d "Common git shell script setup code"
complete -c git -n '__fish_use_subcommand' -x -a shell -d "Restricted login shell for GIT-only SSH access"
complete -c git -n '__fish_use_subcommand' -x -a shortlog -d "Summarize 'git log' output"
complete -c git -n '__fish_use_subcommand' -x -a show-branch -d "Show branches and their commits"
complete -c git -n '__fish_use_subcommand' -x -a show-index -d "Show packed archive index"
complete -c git -n '__fish_use_subcommand' -x -a show-ref -d "List references in a local repository"
complete -c git -n '__fish_use_subcommand' -x -a show -d "Show various types of objects"
complete -c git -n '__fish_use_subcommand' -x -a stash -d "Stash the changes in a dirty working directory away"
complete -c git -n '__fish_use_subcommand' -x -a status -d "Show the working tree status"
complete -c git -n '__fish_use_subcommand' -x -a stripspace -d "Filter out empty lines"
complete -c git -n '__fish_use_subcommand' -x -a submodule -d "Initialize, update or inspect submodules"
complete -c git -n '__fish_use_subcommand' -x -a symbolic-ref -d "Read and modify symbolic refs"
complete -c git -n '__fish_use_subcommand' -x -a tag -d "Create, list, delete or verify a tag object signed with GPG"
complete -c git -n '__fish_use_subcommand' -x -a tar-tree -d "Create a tar archive of the files in the named tree object"
complete -c git -n '__fish_use_subcommand' -x -a unpack-file -d "Creates a temporary file with a blob's contents"
complete -c git -n '__fish_use_subcommand' -x -a unpack-objects -d "Unpack objects from a packed archive"
complete -c git -n '__fish_use_subcommand' -x -a update-index -d "Register file contents in the working tree to the index"
complete -c git -n '__fish_use_subcommand' -x -a update-ref -d "Update the object name stored in a ref safely"
complete -c git -n '__fish_use_subcommand' -x -a update-server-info -d "Update auxiliary info file to help dumb servers"
complete -c git -n '__fish_use_subcommand' -x -a upload-archive -d "Send archive back to git-archive"
complete -c git -n '__fish_use_subcommand' -x -a upload-pack -d "Send objects packed back to git-fetch-pack"
complete -c git -n '__fish_use_subcommand' -x -a var -d "Show a git logical variable"
complete -c git -n '__fish_use_subcommand' -x -a verify-pack -d "Validate packed git archive files"
complete -c git -n '__fish_use_subcommand' -x -a verify-tag -d "Check the GPG signature of tags"
complete -c git -n '__fish_use_subcommand' -x -a web--browse -d "git helper script to launch a web browser"
complete -c git -n '__fish_use_subcommand' -x -a whatchanged -d "Show logs with difference each commit introduces"
complete -c git -n '__fish_use_subcommand' -x -a write-tree -d "Create a tree object from the current index"
 
 
 
 
#
# Completions for the 'add' subcommand
#
 
 
 
#
# Completions for the 'bisect' subcommand
#
 
 
 
#
# Completions for the 'branch' subcommand
#
 
# complete -c git -n 'contains \'branch\' (commandline -poc)' -l contains -x --description 'Shows only the branches that contains the'
# complete -c git -n 'contains \'branch\' (commandline -poc)' -l no-track -x --description 'Given'
 
 
complete -c git -n 'contains \'checkout\' (commandline -poc)' -a '(__git_branch_list)' --description "Check out this branch"
# complete -c git -n 'contains \'branch\' (commandline -poc)' -a '(git_br())' -f --description "Git branch"
 
#
# Completions for the 'checkout' subcommand
#
 
complete -c git -n 'contains \'checkout\' (commandline -poc)' -l track -x --description '--no-track options, which will be passed to git branch'
complete -c git -n 'contains \'checkout\' (commandline -poc)' -l no-track -x --description 'Given'
complete -c git -n 'contains \'checkout\' (commandline -poc)' -l hard -x --description 'To further move around, for example. You'
 
 
#
# Completions for the 'clone' subcommand
#
 
complete -c git -n 'contains \'clone\' (commandline -poc)' -l reference --description '<repository>'
complete -c git -n 'contains \'clone\' (commandline -poc)' -l origin -x --description '-o <name>'
complete -c git -n 'contains \'clone\' (commandline -poc)' -l upload-pack -x --description '-u <upload-pack>'
complete -c git -n 'contains \'clone\' (commandline -poc)' -l exec -x --description 'Is passed to the command to'
complete -c git -n 'contains \'clone\' (commandline -poc)' -l depth --description '<depth>'
 
 
#
# Completions for the 'commit' subcommand
#
 
complete -c git -n 'contains \'commit\' (commandline -poc)' -l author --description '<author>'
 
 
#
# Completions for the 'diff' subcommand
#
 
complete -c git -n 'contains \'diff\' (commandline -poc)' -l cached --description '<tree-ish>'
complete -c git -n 'contains \'diff\' (commandline -poc)' -l cc -x --description 'To generate diff output also for merge commits. The output'
complete -c git -n 'contains \'diff\' (commandline -poc)' -l git -x --description 'B/file2'
complete -c git -n 'contains \'diff\' (commandline -poc)' -l combined --description 'Describe.c'
complete -c git -n 'contains \'diff\' (commandline -poc)' -l - --description 'A/describe.c'
complete -c git -n 'contains \'diff\' (commandline -poc)' -l combined --description 'File'
complete -c git -n 'contains \'diff\' (commandline -poc)' -l c --description 'File'
complete -c git -n 'contains \'diff\' (commandline -poc)' -l - --description 'A/file'
complete -c git -n 'contains \'diff\' (commandline -poc)' -l summary -x --description 'Describes newly added, deleted, renamed and copied'
complete -c git -n 'contains \'diff\' (commandline -poc)' -l numstat -x --description 'Gives the diffstat(1) information but is designed'
 
complete -c git -n 'contains \'diff\' (commandline -poc)' -a '(__git_branch_list)' --description "Diff with this branch"
 
 
 
#
# Completions for the 'fetch' subcommand
#
 
complete -c git -n 'contains \'fetch\' (commandline -poc)' -l quiet -x --description 'Git-fetch-pack and silence any other internally'
complete -c git -n 'contains \'fetch\' (commandline -poc)' -l upload-pack --description '<upload-pack>'
complete -c git -n 'contains \'fetch\' (commandline -poc)' -l exec -x --description 'Is passed to the command to'
complete -c git -n 'contains \'fetch\' (commandline -poc)' -l depth -x --description 'Option (see git-clone(1)) by the specified'
 
 
#
# Completions for the 'grep' subcommand
#
 
complete -c git -n 'contains \'grep\' (commandline -poc)' -s E -l extended-regexp -x --description '-G | --basic-regexp'
complete -c git -n 'contains \'grep\' (commandline -poc)' -s l -l files-with-matches -x --description '-L | --files-without-match'
complete -c git -n 'contains \'grep\' (commandline -poc)' -l and -x --description '--or | --not | ( | )'
complete -c git -n 'contains \'grep\' (commandline -poc)' -l or -x --description 'The default operator. --and has higher'
 
 
#
# Completions for the 'init' subcommand
#
 
 
 
#
# Completions for the 'log' subcommand
#
 
complete -c git -n 'contains \'log\' (commandline -poc)' -l date -x --description 'Shows dates relative to the current time, e.g. "2'
complete -c git -n 'contains \'log\' (commandline -poc)' -l date -x --description 'Shows timestamps in user´s local timezone'
complete -c git -n 'contains \'log\' (commandline -poc)' -l date -x --description '(or --date=iso8601) shows timestamps in ISO 8601 format'
complete -c git -n 'contains \'log\' (commandline -poc)' -l date -x --description '(or --date=rfc2822) shows timestamps in RFC 2822 format,'
complete -c git -n 'contains \'log\' (commandline -poc)' -l date -x --description 'Shows only date but not time, in YYYY-MM-DD format'
complete -c git -n 'contains \'log\' (commandline -poc)' -l date -x --description 'Shows timestamps in the original timezone (either'
complete -c git -n 'contains \'log\' (commandline -poc)' -l since -x --description '--after=date'
complete -c git -n 'contains \'log\' (commandline -poc)' -l until -x --description '--before=date'
complete -c git -n 'contains \'log\' (commandline -poc)' -l max-age -x --description '--min-age=timestamp'
complete -c git -n 'contains \'log\' (commandline -poc)' -l author -x --description '--committer=pattern'
complete -c git -n 'contains \'log\' (commandline -poc)' -l pretty -x --description 'Other than oneline (for obvious reasons), this'
complete -c git -n 'contains \'log\' (commandline -poc)' -l pretty -x --description 'The commit message is prefixed with this'
complete -c git -n 'contains \'log\' (commandline -poc)' -l objects -x --description '^bar thus means "send me all object IDs'
complete -c git -n 'contains \'log\' (commandline -poc)' -l git -x --description 'B/file2'
complete -c git -n 'contains \'log\' (commandline -poc)' -l combined --description 'Describe.c'
complete -c git -n 'contains \'log\' (commandline -poc)' -l - --description 'A/describe.c'
complete -c git -n 'contains \'log\' (commandline -poc)' -l combined --description 'File'
complete -c git -n 'contains \'log\' (commandline -poc)' -l c --description 'File'
complete -c git -n 'contains \'log\' (commandline -poc)' -l - --description 'A/file'
 
complete -c git -n 'contains \'log\' (commandline -poc)' -l stat -x --description 'Show stats with files changed'
complete -c git -n 'contains \'log\' (commandline -poc)' -l shortstat -x --description 'Show stats with number of files changed'
complete -c git -n 'contains \'log\' (commandline -poc)' -l name-status -x --description 'Show stats a-la Subversion'
 
 
 
 
#
# Completions for the 'merge' subcommand
#
 
complete -c git -n 'contains \'merge\' (commandline -poc)' -a '(__git_branch_list)' --description "Merge with this branch"
 
 
 
#
# Completions for the 'mv' subcommand
#
 
 
 
#
# Completions for the 'pull' subcommand
#
 
complete -c git -n 'contains \'pull\' (commandline -poc)' -l quiet -x --description 'Git-fetch-pack and silence any other internally'
complete -c git -n 'contains \'pull\' (commandline -poc)' -l upload-pack --description '<upload-pack>'
complete -c git -n 'contains \'pull\' (commandline -poc)' -l exec -x --description 'Is passed to the command to'
complete -c git -n 'contains \'pull\' (commandline -poc)' -l depth -x --description 'Option (see git-clone(1)) by the specified'
 
 
#
# Completions for the 'push' subcommand
#
 
 
 
#
# Completions for the 'rebase' subcommand
#
 
complete -c git -n 'contains \'rebase\' (commandline -poc)' -l continue -x --description '--skip | --abort'
complete -c git -n 'contains \'rebase\' (commandline -poc)' -l onto -x --description 'Next topic'
complete -c git -n 'contains \'rebase\' (commandline -poc)' -l onto -x --description 'TopicA topicB'
complete -c git -n 'contains \'rebase\' (commandline -poc)' -l onto -x --description 'TopicA~3 topicA'
 
 
#
# Completions for the 'reset' subcommand
#
 
 
 
#
# Completions for the 'rm' subcommand
#
 
complete -c git -n 'contains \'rm\' (commandline -poc)' -l cached -x --description 'Given, the staged content has to match either the tip of'
 
 
#
# Completions for the 'show' subcommand
#
 
 
 
#
# Completions for the 'status' subcommand
#
 
 
 
#
# Completions for the 'tag' subcommand
#
 
 
 
 

